#!/usr/bin/env python
import os
import time
import _thread
import requests
import json

from PIL import Image
from PIL import ImageDraw
from datetime import datetime

from rgbmatrix import graphics
from controller.matrix import MatrixController
from controller.gifparser import GifParser
from controller.mqttcontroller import MqttController
from controller.musicHandler import MusicHandler

class InfoDisplay:
    __newsText = ''
    __currentSong = 'Hier koennte Ihre Werbung stehen.   '
    __weatherTemp = None
    __brightness = 100   # brightness is set in from 0% - 100%
    __global_font_color = (255, 255, 255)

    def __init__(self, matrix_controller: MatrixController):
        self.display = matrix_controller
        _thread.start_new_thread(self.__render_loop, ())
        _thread.start_new_thread(self.__external_data_fetcher, ())

        self.music = MusicHandler()
        self.music.image_path = os.path.dirname(os.path.realpath(__file__)) + '/../assets/cover.jpg'
        mqtt = MqttController()
        mqtt.subscribe_to_topic('smarthome/display/color',
                                self.__callback_set_font_color)
        mqtt.subscribe_to_topic('weather', self.__callback_getWeather)
        mqtt.subscribe_to_topic('newsticker/articles', self.__callback_newsHandler)
        mqtt.subscribe_to_topic('smarthome/sonos/wohnzimmer', self.music.parseMsg)
        print('Render thread is running.')

    @staticmethod
    def __load_font(filename):
        font = graphics.Font()
        font.LoadFont(os.path.dirname(os.path.realpath(__file__)) + '/../fonts/' + filename)
        return font

    def __callback_set_font_color(self, msg):
        data = json.loads(msg.decode('UTF-8'))
        print(data)
        color = data.get("color", None)
        brightness = data.get("brightness", None)
        if(color):
            self.__global_font_color = (color[0], color[1], color[2])

        if(brightness):
            self.__brightness = brightness

    def __callback_getWeather(self, msg):
        weather = json.loads(msg.decode('UTF-8'))
        #print(weather["tempc"])
        self.__weatherTemp = float(weather["tempc"])

    def __callback_newsHandler(self, msg):
        articles = json.loads(msg.decode('UTF-8'))
        text_buffer = " <-> "
        for post in articles:
            text_buffer += post["title"] + " <-> "
        self.__newsText = text_buffer

    def __external_data_fetcher(self):
        while True:
            try:
                if (self.music.state == "playing"):
                    if (self.music.artist):
                        self.__currentSong = self.music.title + " - " + self.music.artist
                    else:
                        self.__currentSong = self.music.title


                time.sleep(5)
            except Exception:
                pass

    def __render_loop(self):
        font_big = self.__load_font('8x13B.bdf')
        font_medium = self.__load_font('8x13.bdf')
        font_small = self.__load_font('5x7.bdf')

        marquee_news_pos = self.display.canvas.width
        marquee_title_pos = self.display.canvas.width
        marquee_songInfo_pos = self.display.canvas.width


        gif = GifParser(os.path.dirname(os.path.realpath(__file__)) + '/../assets/pong.gif')
        gif_counter = 0
        gif_delay = 0

        while True:
            self.display.canvas.Clear()
            self.display.canvas.brightness = self.__brightness
            text_color = graphics.Color(self.__global_font_color[0], self.__global_font_color[1],
                                        self.__global_font_color[2])

            #if(self.music.state == "playing"):
            if(False):
                marquee_title_pos = self.__render_marquee_title(font_medium, marquee_title_pos, text_color)
                marquee_songInfo_pos = self.__render_marquee_songInfo(font_small, marquee_songInfo_pos, graphics.Color(255,255,25))
                self.__render_cover()
                self.__render_song_pos(text_color)

            else:
                self.__render_date_and_time(font_big, font_small, tex)
                self.__render_weather(font_small, graphics.Color(255,255,0))
                marquee_news_pos = self.__render_marquee_news(font_small, marquee_news_pos, graphics.Color(255,150,150))
                #gif_delay, gif_counter = self.__reader_gif_frame(gif_delay, gif, gif_counter)

            self.display.canvas = self.display.matrix.SwapOnVSync(self.display.canvas)
            time.sleep(0.03)

    def __reader_gif_frame(self, delay, gif, gif_counter):
        if delay == 1:
            delay = 0
            if gif_counter == gif.numFrames:
                gif_counter = 1
            else:
                gif_counter += 1
        else:
            delay += 1

        frame = gif.get_frame(gif_counter)
        for x in range(1, 12):
            for y in range(1, 12):
                r, g, b = gif.get_pixel(x, y, frame)

                self.display.canvas.SetPixel(x - 1, y + 20, int(r * (self.__global_font_color[0] / 255)),
                                             int(g * (self.__global_font_color[1] / 255)),
                                             int(b * (self.__global_font_color[2] / 255)))

        return delay, gif_counter

    def __render_marquee_news(self, font_small, marqueetext_pos, text_color):
        text_length = graphics.DrawText(self.display.canvas, font_small, marqueetext_pos, 30, text_color,
                                        self.__newsText)
        marqueetext_pos -= 1
        if marqueetext_pos + text_length < 0:
            marqueetext_pos = self.display.canvas.width

        return marqueetext_pos

    def __render_marquee_title(self, font_big, marqueetext_pos, text_color):
        text_length = graphics.DrawText(self.display.canvas, font_big, marqueetext_pos, 30, text_color,
                                        self.music.title)
        marqueetext_pos -= 1
        if marqueetext_pos + text_length < 0:
            marqueetext_pos = self.display.canvas.width

        return marqueetext_pos


    def __render_marquee_songInfo(self, font_small, marqueetext_pos, text_color):
        text_length = 1
        if(self.music.artist):
            text_length = graphics.DrawText(self.display.canvas, font_small, marqueetext_pos, 8, text_color,
                                        self.music.artist)
        if(self.music.artist):
            text_length_b = graphics.DrawText(self.display.canvas, font_small, marqueetext_pos, 18, text_color,
                                        self.music.album)
            if(text_length_b > text_length):
                text_length = text_length_b

        marqueetext_pos -= 0.5
        if marqueetext_pos + text_length < 20:
            marqueetext_pos = self.display.canvas.width

        return marqueetext_pos


    def __render_weather(self, font_small, text_color):
        if self.__weatherTemp is not None:
            weather_string = '%4.1fÂ°C' % self.__weatherTemp
            graphics.DrawText(self.display.canvas, font_small, 34, 20, text_color, weather_string)

    def __render_date_and_time(self, font_big, font_small, text_color):
        time_string = time.strftime('%H:%M:%S')
        graphics.DrawText(self.display.canvas, font_big, 0, 11, text_color, time_string)
        date_string = time.strftime('%d/%m')
        graphics.DrawText(self.display.canvas, font_small, 0, 20, text_color, date_string)

    def __render_cover(self):
        self.display.canvas.SetImage(self.music.cover, unsafe=False)

    def __render_song_pos(self, color):
        #graphics.DrawLine(self.display.canvas, 0, 29, 63, 29, color)
        try:
            pos_track = datetime.now().timestamp() - self.music.start
            pos = int((pos_track / self.music.duration)* 63)
        except:
            pos = 0

        graphics.DrawLine(self.display.canvas, 0, 31, pos, 31, graphics.Color(0,0,255))
        self.display.canvas.SetPixel(pos, 31, 0,255,255)


    def set_marquee_text(self, text):
        self.__marqueeText = text
